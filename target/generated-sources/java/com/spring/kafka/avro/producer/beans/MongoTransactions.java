/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.spring.kafka.avro.producer.beans;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MongoTransactions extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7099269017812465087L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MongoTransactions\",\"namespace\":\"com.spring.kafka.avro.producer.beans\",\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"amount\",\"type\":\"double\"},{\"name\":\"biller\",\"type\":[\"string\",\"null\"]},{\"name\":\"created_on\",\"type\":[\"string\",\"null\"]},{\"name\":\"fradulent\",\"type\":\"string\"},{\"name\":\"location\",\"type\":[\"string\",\"null\"]},{\"name\":\"mode_of_payment\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"user_id\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MongoTransactions> ENCODER =
      new BinaryMessageEncoder<MongoTransactions>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MongoTransactions> DECODER =
      new BinaryMessageDecoder<MongoTransactions>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MongoTransactions> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MongoTransactions> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MongoTransactions>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MongoTransactions to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MongoTransactions from a ByteBuffer. */
  public static MongoTransactions fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int Id;
  @Deprecated public double amount;
  @Deprecated public java.lang.CharSequence biller;
  @Deprecated public java.lang.CharSequence created_on;
  @Deprecated public java.lang.CharSequence fradulent;
  @Deprecated public java.lang.CharSequence location;
  @Deprecated public java.lang.CharSequence mode_of_payment;
  @Deprecated public java.lang.CharSequence status;
  @Deprecated public java.lang.CharSequence user_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MongoTransactions() {}

  /**
   * All-args constructor.
   * @param Id The new value for Id
   * @param amount The new value for amount
   * @param biller The new value for biller
   * @param created_on The new value for created_on
   * @param fradulent The new value for fradulent
   * @param location The new value for location
   * @param mode_of_payment The new value for mode_of_payment
   * @param status The new value for status
   * @param user_id The new value for user_id
   */
  public MongoTransactions(java.lang.Integer Id, java.lang.Double amount, java.lang.CharSequence biller, java.lang.CharSequence created_on, java.lang.CharSequence fradulent, java.lang.CharSequence location, java.lang.CharSequence mode_of_payment, java.lang.CharSequence status, java.lang.CharSequence user_id) {
    this.Id = Id;
    this.amount = amount;
    this.biller = biller;
    this.created_on = created_on;
    this.fradulent = fradulent;
    this.location = location;
    this.mode_of_payment = mode_of_payment;
    this.status = status;
    this.user_id = user_id;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Id;
    case 1: return amount;
    case 2: return biller;
    case 3: return created_on;
    case 4: return fradulent;
    case 5: return location;
    case 6: return mode_of_payment;
    case 7: return status;
    case 8: return user_id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Id = (java.lang.Integer)value$; break;
    case 1: amount = (java.lang.Double)value$; break;
    case 2: biller = (java.lang.CharSequence)value$; break;
    case 3: created_on = (java.lang.CharSequence)value$; break;
    case 4: fradulent = (java.lang.CharSequence)value$; break;
    case 5: location = (java.lang.CharSequence)value$; break;
    case 6: mode_of_payment = (java.lang.CharSequence)value$; break;
    case 7: status = (java.lang.CharSequence)value$; break;
    case 8: user_id = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Id' field.
   * @return The value of the 'Id' field.
   */
  public java.lang.Integer getId() {
    return Id;
  }

  /**
   * Sets the value of the 'Id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.Id = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Double getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'biller' field.
   * @return The value of the 'biller' field.
   */
  public java.lang.CharSequence getBiller() {
    return biller;
  }

  /**
   * Sets the value of the 'biller' field.
   * @param value the value to set.
   */
  public void setBiller(java.lang.CharSequence value) {
    this.biller = value;
  }

  /**
   * Gets the value of the 'created_on' field.
   * @return The value of the 'created_on' field.
   */
  public java.lang.CharSequence getCreatedOn() {
    return created_on;
  }

  /**
   * Sets the value of the 'created_on' field.
   * @param value the value to set.
   */
  public void setCreatedOn(java.lang.CharSequence value) {
    this.created_on = value;
  }

  /**
   * Gets the value of the 'fradulent' field.
   * @return The value of the 'fradulent' field.
   */
  public java.lang.CharSequence getFradulent() {
    return fradulent;
  }

  /**
   * Sets the value of the 'fradulent' field.
   * @param value the value to set.
   */
  public void setFradulent(java.lang.CharSequence value) {
    this.fradulent = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public java.lang.CharSequence getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(java.lang.CharSequence value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'mode_of_payment' field.
   * @return The value of the 'mode_of_payment' field.
   */
  public java.lang.CharSequence getModeOfPayment() {
    return mode_of_payment;
  }

  /**
   * Sets the value of the 'mode_of_payment' field.
   * @param value the value to set.
   */
  public void setModeOfPayment(java.lang.CharSequence value) {
    this.mode_of_payment = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return The value of the 'user_id' field.
   */
  public java.lang.CharSequence getUserId() {
    return user_id;
  }

  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.CharSequence value) {
    this.user_id = value;
  }

  /**
   * Creates a new MongoTransactions RecordBuilder.
   * @return A new MongoTransactions RecordBuilder
   */
  public static com.spring.kafka.avro.producer.beans.MongoTransactions.Builder newBuilder() {
    return new com.spring.kafka.avro.producer.beans.MongoTransactions.Builder();
  }

  /**
   * Creates a new MongoTransactions RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MongoTransactions RecordBuilder
   */
  public static com.spring.kafka.avro.producer.beans.MongoTransactions.Builder newBuilder(com.spring.kafka.avro.producer.beans.MongoTransactions.Builder other) {
    return new com.spring.kafka.avro.producer.beans.MongoTransactions.Builder(other);
  }

  /**
   * Creates a new MongoTransactions RecordBuilder by copying an existing MongoTransactions instance.
   * @param other The existing instance to copy.
   * @return A new MongoTransactions RecordBuilder
   */
  public static com.spring.kafka.avro.producer.beans.MongoTransactions.Builder newBuilder(com.spring.kafka.avro.producer.beans.MongoTransactions other) {
    return new com.spring.kafka.avro.producer.beans.MongoTransactions.Builder(other);
  }

  /**
   * RecordBuilder for MongoTransactions instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MongoTransactions>
    implements org.apache.avro.data.RecordBuilder<MongoTransactions> {

    private int Id;
    private double amount;
    private java.lang.CharSequence biller;
    private java.lang.CharSequence created_on;
    private java.lang.CharSequence fradulent;
    private java.lang.CharSequence location;
    private java.lang.CharSequence mode_of_payment;
    private java.lang.CharSequence status;
    private java.lang.CharSequence user_id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.spring.kafka.avro.producer.beans.MongoTransactions.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Id)) {
        this.Id = data().deepCopy(fields()[0].schema(), other.Id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.biller)) {
        this.biller = data().deepCopy(fields()[2].schema(), other.biller);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.created_on)) {
        this.created_on = data().deepCopy(fields()[3].schema(), other.created_on);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.fradulent)) {
        this.fradulent = data().deepCopy(fields()[4].schema(), other.fradulent);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.location)) {
        this.location = data().deepCopy(fields()[5].schema(), other.location);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.mode_of_payment)) {
        this.mode_of_payment = data().deepCopy(fields()[6].schema(), other.mode_of_payment);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.user_id)) {
        this.user_id = data().deepCopy(fields()[8].schema(), other.user_id);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MongoTransactions instance
     * @param other The existing instance to copy.
     */
    private Builder(com.spring.kafka.avro.producer.beans.MongoTransactions other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.Id)) {
        this.Id = data().deepCopy(fields()[0].schema(), other.Id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.biller)) {
        this.biller = data().deepCopy(fields()[2].schema(), other.biller);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.created_on)) {
        this.created_on = data().deepCopy(fields()[3].schema(), other.created_on);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.fradulent)) {
        this.fradulent = data().deepCopy(fields()[4].schema(), other.fradulent);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.location)) {
        this.location = data().deepCopy(fields()[5].schema(), other.location);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.mode_of_payment)) {
        this.mode_of_payment = data().deepCopy(fields()[6].schema(), other.mode_of_payment);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.user_id)) {
        this.user_id = data().deepCopy(fields()[8].schema(), other.user_id);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'Id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return Id;
    }

    /**
      * Sets the value of the 'Id' field.
      * @param value The value of 'Id'.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder setId(int value) {
      validate(fields()[0], value);
      this.Id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Id' field has been set.
      * @return True if the 'Id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Id' field.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Double getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder setAmount(double value) {
      validate(fields()[1], value);
      this.amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder clearAmount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'biller' field.
      * @return The value.
      */
    public java.lang.CharSequence getBiller() {
      return biller;
    }

    /**
      * Sets the value of the 'biller' field.
      * @param value The value of 'biller'.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder setBiller(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.biller = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'biller' field has been set.
      * @return True if the 'biller' field has been set, false otherwise.
      */
    public boolean hasBiller() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'biller' field.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder clearBiller() {
      biller = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'created_on' field.
      * @return The value.
      */
    public java.lang.CharSequence getCreatedOn() {
      return created_on;
    }

    /**
      * Sets the value of the 'created_on' field.
      * @param value The value of 'created_on'.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder setCreatedOn(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.created_on = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'created_on' field has been set.
      * @return True if the 'created_on' field has been set, false otherwise.
      */
    public boolean hasCreatedOn() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'created_on' field.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder clearCreatedOn() {
      created_on = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'fradulent' field.
      * @return The value.
      */
    public java.lang.CharSequence getFradulent() {
      return fradulent;
    }

    /**
      * Sets the value of the 'fradulent' field.
      * @param value The value of 'fradulent'.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder setFradulent(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.fradulent = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'fradulent' field has been set.
      * @return True if the 'fradulent' field has been set, false otherwise.
      */
    public boolean hasFradulent() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'fradulent' field.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder clearFradulent() {
      fradulent = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public java.lang.CharSequence getLocation() {
      return location;
    }

    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder setLocation(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.location = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder clearLocation() {
      location = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'mode_of_payment' field.
      * @return The value.
      */
    public java.lang.CharSequence getModeOfPayment() {
      return mode_of_payment;
    }

    /**
      * Sets the value of the 'mode_of_payment' field.
      * @param value The value of 'mode_of_payment'.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder setModeOfPayment(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.mode_of_payment = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'mode_of_payment' field has been set.
      * @return True if the 'mode_of_payment' field has been set, false otherwise.
      */
    public boolean hasModeOfPayment() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'mode_of_payment' field.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder clearModeOfPayment() {
      mode_of_payment = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.status = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder clearStatus() {
      status = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserId() {
      return user_id;
    }

    /**
      * Sets the value of the 'user_id' field.
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder setUserId(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.user_id = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'user_id' field.
      * @return This builder.
      */
    public com.spring.kafka.avro.producer.beans.MongoTransactions.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MongoTransactions build() {
      try {
        MongoTransactions record = new MongoTransactions();
        record.Id = fieldSetFlags()[0] ? this.Id : (java.lang.Integer) defaultValue(fields()[0]);
        record.amount = fieldSetFlags()[1] ? this.amount : (java.lang.Double) defaultValue(fields()[1]);
        record.biller = fieldSetFlags()[2] ? this.biller : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.created_on = fieldSetFlags()[3] ? this.created_on : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.fradulent = fieldSetFlags()[4] ? this.fradulent : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.location = fieldSetFlags()[5] ? this.location : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.mode_of_payment = fieldSetFlags()[6] ? this.mode_of_payment : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.status = fieldSetFlags()[7] ? this.status : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.user_id = fieldSetFlags()[8] ? this.user_id : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MongoTransactions>
    WRITER$ = (org.apache.avro.io.DatumWriter<MongoTransactions>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MongoTransactions>
    READER$ = (org.apache.avro.io.DatumReader<MongoTransactions>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
